- name: Get AWS account information
  local_action:
    module: aws_caller_facts
  register: caller_facts

- name: Check if selected instance already exists
  local_action:
    module: ec2_instance_facts
    region: "{{ ec2_region }}"
    filters:
      "tag:Name": "{{ ansible_user }}-{{ instance_name }}"
      "tag:creator_arn": "{{ caller_facts.arn }}"
      "tag:user": "{{ ansible_user }}"
  register: ec2_instance

- set_fact:
    ec2_created: "{{ 'running' in (ec2_instance.instances | selectattr('state') | map(attribute='state.name') | list | unique) }}"

- name: Create AWS EC2 instance
  block:
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ instance_name }}"
        cidr_block: "{{ cidr }}"
        region: "{{ ec2_region }}"
        tags:
          creator: "{{ instance_name }}"
      register: ec2_vpc

    - name: Create VPC subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ ec2_vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ ec2_region }}"
        resource_tags:
          creator: "{{ instance_name }}"
      register: ec2_subnet

    - name: Create VPC Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ ec2_vpc.vpc.id }}"
        region: "{{ ec2_region }}"
        tags:
          Name: "{{ instance_name }}"
      register: ec2_igw

    - name: Create VPC Routing Table
      ec2_vpc_route_table:
        vpc_id: "{{ ec2_vpc.vpc.id }}"
        region: "{{ ec2_region }}"
        tags:
          Name: "{{ instance_name }}"
        subnets:
        - "{{ ec2_subnet.subnet.id }}"
        routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ ec2_igw.gateway_id }}"

    - name: Create Security Group
      include_tasks: "{{ security_group_type }}_security_group.yml"

    - name: Add additional tags to the Security Group
      block:
        - ec2_group_facts:
            region: "{{ ec2_region }}"
            filters:
              group-name: "{{ instance_name }}"
          register: ec2_sec_gr

        - ec2_tag:
            resource: "{{ ec2_sec_gr.security_groups[0].group_id }}"
            region: "{{ ec2_region }}"
            tags: "{{ sec_group_additional_tags }}"
      when: sec_group_additional_tags is defined

    - name: Find a Suitable AMI
      ec2_ami_facts:
        owners: 309956199498
        region: "{{ ec2_region }}"
        filters:
          "name": "RHEL-{{ rhel_version }}_HVM_GA*"
      register: ami

    - set_fact:
        suggested_ami: "{{ ami.images | map(attribute='image_id') | list | first }}"

    - set_fact:
        inst_tags:
          creator_arn: "{{ caller_facts.arn }}"
          user: "{{ ansible_user }}"
          Name: "{{ ansible_user }}-{{ instance_name }}"

    - set_fact:
        inst_tags: "{{ inst_tags | combine(additional_tags) }}"
      when: additional_tags is defined

    - name: Create Instance
      ec2:
        key_name: "{{ ec2_key }}"
        instance_type: "{{ instance_type }}"
        group: "{{ instance_name }}"
        image: "{{ suggested_ami }}"
        count: 1
        region: "{{ ec2_region }}"
        vpc_subnet_id: "{{ ec2_subnet.subnet.id }}"
        assign_public_ip: yes
        instance_tags: "{{ inst_tags }}"
        wait: yes

  when: not ec2_created
